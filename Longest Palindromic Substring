#Given a string s, return the longest palindromic substring in s


"""
Calculate longest odd-numbered substring and even-numbered substring separately
Odd:
Treat each letter as the middle of a substring and iterate outward 
Even:
Treat each pair as the middle of a substring and iterate outward

Continue iterating as long as both pointers are the same (meaning string is still a palindrome)
"""


   def longestPalindrome(self, s: str) -> str:
   
        result = ""
        maxLen = 0
        
        for i in range(len(s)):
            # odd length
            left, right = i, i
            #while pointers are in bounds and substring is a palindrome
            while left >= 0 and right < len(s) and s[left] == s[right]:
                if (right - left + 1) > maxLen:
                    result = s[left:right+1]
                    maxLen = right - left + 1
                left -= 1
                right += 1
            
            # even length
            left, right = i, i + 1
            #while pointers are in bounds and substring is a palindrome
            while left >= 0 and right < len(s) and s[left] == s[right]:
                if (right - left + 1) > maxLen:
                    result = s[left:right+1]
                    maxLen = right - left + 1
                left -= 1
                right += 1
                
        return result
        
        
