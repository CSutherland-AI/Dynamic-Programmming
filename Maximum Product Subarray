"""
Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

"""

def maxProduct(self, nums: List[int]) -> int:
        
        #Store max and min        
        #[2,3,0,-2,-4]
        #[-2,0]
        
           
        #iterate through array
        #at each position, find max prod ending there and min prod ending there
        #compare to total max so far
        
        
        ans=currmax=currmin=nums[0]       
        
        for i in range (1,len(nums)):
            if nums[i]==0:
                currmax=currmin=1                
            prevmax=currmax
            currmax=max(nums[i],nums[i]*currmax, nums[i]*currmin)            
            currmin=min(nums[i],nums[i]*prevmax,nums[i]*currmin)            
            if currmax>ans:
                ans=currmax          
            
        return ans
            
